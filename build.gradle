plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.0"
    id "edu.wpi.first.GradleRIO" version "2018.06.21"
    id "com.jetbrains.python.envs" version "0.0.25"
}

def ROBOT_CLASS = "frc.team5499.frc2018Kotlin.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            // Team can be overridden by command line, for use with VSCode
            team = getTeamOrDefault(5499)
        }
    }
    artifacts {
        // We still use FRCJavaArtifact since kotlin does respond as a Java build.
        artifact('frcKotlin', edu.wpi.first.gradlerio.frc.FRCJavaArtifact) {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

// Defining my dependencies. In this case, WPILib (+ friends)
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'

    compile wpilib()
    compile ctre()

    // We need to add the Kotlin stdlib in order to use most Kotlin language features.
    compile "org.jetbrains.kotlin:kotlin-stdlib"
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

test {
    dependsOn 'build_envs'

    useJUnitPlatform()

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
        showStandardStreams true
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }

    doLast {
        exec {
            executable file('./virtualenv_run/bin/pre-commit')
            args "run", "--all-files"
        }
    }
}

// Set up python environments for pre-commit
envs {
    bootstrapDirectory = file('.')
    python "virtualenv_run", "3.6.7", ["pre-commit"]
}

task install_hooks {
    dependsOn 'build_envs'
    doLast {
        exec {
            executable file('./virtualenv_run/bin/pre-commit')
            args "install", "-f", "--install-hooks"
        }
    }
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += '-parameters'
}
